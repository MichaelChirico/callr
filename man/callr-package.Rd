% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/callr-package.R
\docType{package}
\name{callr-package}
\alias{callr}
\alias{callr-package}
\title{Call R from R}
\description{
It is sometimes useful to perform a computation in a separate
R process, without affecting the current R process at all.  This
packages does exactly that.\if{html}{\out{
<style type="text/css">
.ansi-bold         \{ font-weight: bold;             \}
.ansi-italic       \{ font-style: italic;            \}
.ansi-underline    \{ text-decoration: underline;    \}
.ansi-blink        \{ text-decoration: blink;        \}
.ansi-hide         \{ visibility: hidden;            \}
.ansi-crossedout   \{ text-decoration: line-through; \}
.ansi-link:hover   \{ text-decoration: underline;    \}
.ansi-color-0      \{ color: #282D35 \}
.ansi-color-1      \{ color: #E88388 \}
.ansi-color-2      \{ color: #A8CC8C \}
.ansi-color-3      \{ color: #DBAB79 \}
.ansi-color-4      \{ color: #71BEF2 \}
.ansi-color-5      \{ color: #D290E4 \}
.ansi-color-6      \{ color: #66C2CD \}
.ansi-color-7      \{ color: #B9BFCA \}
.ansi-color-8      \{ color: #6F7783 \}
.ansi-color-9      \{ color: #E88388 \}
.ansi-color-10     \{ color: #A8CC8C \}
.ansi-color-11     \{ color: #DBAB79 \}
.ansi-color-12     \{ color: #73BEF3 \}
.ansi-color-13     \{ color: #D290E3 \}
.ansi-color-14     \{ color: #66C2CD \}
.ansi-color-15     \{ color: #FFFFFF \}
.ansi-bg-color-0   \{ background-color: #282D35 \}
.ansi-bg-color-1   \{ background-color: #E88388 \}
.ansi-bg-color-2   \{ background-color: #A8CC8C \}
.ansi-bg-color-3   \{ background-color: #DBAB79 \}
.ansi-bg-color-4   \{ background-color: #71BEF2 \}
.ansi-bg-color-5   \{ background-color: #D290E4 \}
.ansi-bg-color-6   \{ background-color: #66C2CD \}
.ansi-bg-color-7   \{ background-color: #B9BFCA \}
.ansi-bg-color-8   \{ background-color: #6F7783 \}
.ansi-bg-color-9   \{ background-color: #E88388 \}
.ansi-bg-color-10  \{ background-color: #A8CC8C \}
.ansi-bg-color-11  \{ background-color: #DBAB79 \}
.ansi-bg-color-12  \{ background-color: #73BEF3 \}
.ansi-bg-color-13  \{ background-color: #D290E3 \}
.ansi-bg-color-14  \{ background-color: #66C2CD \}
.ansi-bg-color-15  \{ background-color: #FFFFFF \}
.ansi-color-16     \{ color: #000000 \}
.ansi-color-52     \{ color: #330000 \}
.ansi-color-88     \{ color: #660000 \}
.ansi-color-124    \{ color: #990000 \}
.ansi-color-160    \{ color: #cc0000 \}
.ansi-color-196    \{ color: #ff0000 \}
.ansi-color-22     \{ color: #003300 \}
.ansi-color-58     \{ color: #333300 \}
.ansi-color-94     \{ color: #663300 \}
.ansi-color-130    \{ color: #993300 \}
.ansi-color-166    \{ color: #cc3300 \}
.ansi-color-202    \{ color: #ff3300 \}
.ansi-color-28     \{ color: #006600 \}
.ansi-color-64     \{ color: #336600 \}
.ansi-color-100    \{ color: #666600 \}
.ansi-color-136    \{ color: #996600 \}
.ansi-color-172    \{ color: #cc6600 \}
.ansi-color-208    \{ color: #ff6600 \}
.ansi-color-34     \{ color: #009900 \}
.ansi-color-70     \{ color: #339900 \}
.ansi-color-106    \{ color: #669900 \}
.ansi-color-142    \{ color: #999900 \}
.ansi-color-178    \{ color: #cc9900 \}
.ansi-color-214    \{ color: #ff9900 \}
.ansi-color-40     \{ color: #00cc00 \}
.ansi-color-76     \{ color: #33cc00 \}
.ansi-color-112    \{ color: #66cc00 \}
.ansi-color-148    \{ color: #99cc00 \}
.ansi-color-184    \{ color: #cccc00 \}
.ansi-color-220    \{ color: #ffcc00 \}
.ansi-color-46     \{ color: #00ff00 \}
.ansi-color-82     \{ color: #33ff00 \}
.ansi-color-118    \{ color: #66ff00 \}
.ansi-color-154    \{ color: #99ff00 \}
.ansi-color-190    \{ color: #ccff00 \}
.ansi-color-226    \{ color: #ffff00 \}
.ansi-color-17     \{ color: #000033 \}
.ansi-color-53     \{ color: #330033 \}
.ansi-color-89     \{ color: #660033 \}
.ansi-color-125    \{ color: #990033 \}
.ansi-color-161    \{ color: #cc0033 \}
.ansi-color-197    \{ color: #ff0033 \}
.ansi-color-23     \{ color: #003333 \}
.ansi-color-59     \{ color: #333333 \}
.ansi-color-95     \{ color: #663333 \}
.ansi-color-131    \{ color: #993333 \}
.ansi-color-167    \{ color: #cc3333 \}
.ansi-color-203    \{ color: #ff3333 \}
.ansi-color-29     \{ color: #006633 \}
.ansi-color-65     \{ color: #336633 \}
.ansi-color-101    \{ color: #666633 \}
.ansi-color-137    \{ color: #996633 \}
.ansi-color-173    \{ color: #cc6633 \}
.ansi-color-209    \{ color: #ff6633 \}
.ansi-color-35     \{ color: #009933 \}
.ansi-color-71     \{ color: #339933 \}
.ansi-color-107    \{ color: #669933 \}
.ansi-color-143    \{ color: #999933 \}
.ansi-color-179    \{ color: #cc9933 \}
.ansi-color-215    \{ color: #ff9933 \}
.ansi-color-41     \{ color: #00cc33 \}
.ansi-color-77     \{ color: #33cc33 \}
.ansi-color-113    \{ color: #66cc33 \}
.ansi-color-149    \{ color: #99cc33 \}
.ansi-color-185    \{ color: #cccc33 \}
.ansi-color-221    \{ color: #ffcc33 \}
.ansi-color-47     \{ color: #00ff33 \}
.ansi-color-83     \{ color: #33ff33 \}
.ansi-color-119    \{ color: #66ff33 \}
.ansi-color-155    \{ color: #99ff33 \}
.ansi-color-191    \{ color: #ccff33 \}
.ansi-color-227    \{ color: #ffff33 \}
.ansi-color-18     \{ color: #000066 \}
.ansi-color-54     \{ color: #330066 \}
.ansi-color-90     \{ color: #660066 \}
.ansi-color-126    \{ color: #990066 \}
.ansi-color-162    \{ color: #cc0066 \}
.ansi-color-198    \{ color: #ff0066 \}
.ansi-color-24     \{ color: #003366 \}
.ansi-color-60     \{ color: #333366 \}
.ansi-color-96     \{ color: #663366 \}
.ansi-color-132    \{ color: #993366 \}
.ansi-color-168    \{ color: #cc3366 \}
.ansi-color-204    \{ color: #ff3366 \}
.ansi-color-30     \{ color: #006666 \}
.ansi-color-66     \{ color: #336666 \}
.ansi-color-102    \{ color: #666666 \}
.ansi-color-138    \{ color: #996666 \}
.ansi-color-174    \{ color: #cc6666 \}
.ansi-color-210    \{ color: #ff6666 \}
.ansi-color-36     \{ color: #009966 \}
.ansi-color-72     \{ color: #339966 \}
.ansi-color-108    \{ color: #669966 \}
.ansi-color-144    \{ color: #999966 \}
.ansi-color-180    \{ color: #cc9966 \}
.ansi-color-216    \{ color: #ff9966 \}
.ansi-color-42     \{ color: #00cc66 \}
.ansi-color-78     \{ color: #33cc66 \}
.ansi-color-114    \{ color: #66cc66 \}
.ansi-color-150    \{ color: #99cc66 \}
.ansi-color-186    \{ color: #cccc66 \}
.ansi-color-222    \{ color: #ffcc66 \}
.ansi-color-48     \{ color: #00ff66 \}
.ansi-color-84     \{ color: #33ff66 \}
.ansi-color-120    \{ color: #66ff66 \}
.ansi-color-156    \{ color: #99ff66 \}
.ansi-color-192    \{ color: #ccff66 \}
.ansi-color-228    \{ color: #ffff66 \}
.ansi-color-19     \{ color: #000099 \}
.ansi-color-55     \{ color: #330099 \}
.ansi-color-91     \{ color: #660099 \}
.ansi-color-127    \{ color: #990099 \}
.ansi-color-163    \{ color: #cc0099 \}
.ansi-color-199    \{ color: #ff0099 \}
.ansi-color-25     \{ color: #003399 \}
.ansi-color-61     \{ color: #333399 \}
.ansi-color-97     \{ color: #663399 \}
.ansi-color-133    \{ color: #993399 \}
.ansi-color-169    \{ color: #cc3399 \}
.ansi-color-205    \{ color: #ff3399 \}
.ansi-color-31     \{ color: #006699 \}
.ansi-color-67     \{ color: #336699 \}
.ansi-color-103    \{ color: #666699 \}
.ansi-color-139    \{ color: #996699 \}
.ansi-color-175    \{ color: #cc6699 \}
.ansi-color-211    \{ color: #ff6699 \}
.ansi-color-37     \{ color: #009999 \}
.ansi-color-73     \{ color: #339999 \}
.ansi-color-109    \{ color: #669999 \}
.ansi-color-145    \{ color: #999999 \}
.ansi-color-181    \{ color: #cc9999 \}
.ansi-color-217    \{ color: #ff9999 \}
.ansi-color-43     \{ color: #00cc99 \}
.ansi-color-79     \{ color: #33cc99 \}
.ansi-color-115    \{ color: #66cc99 \}
.ansi-color-151    \{ color: #99cc99 \}
.ansi-color-187    \{ color: #cccc99 \}
.ansi-color-223    \{ color: #ffcc99 \}
.ansi-color-49     \{ color: #00ff99 \}
.ansi-color-85     \{ color: #33ff99 \}
.ansi-color-121    \{ color: #66ff99 \}
.ansi-color-157    \{ color: #99ff99 \}
.ansi-color-193    \{ color: #ccff99 \}
.ansi-color-229    \{ color: #ffff99 \}
.ansi-color-20     \{ color: #0000cc \}
.ansi-color-56     \{ color: #3300cc \}
.ansi-color-92     \{ color: #6600cc \}
.ansi-color-128    \{ color: #9900cc \}
.ansi-color-164    \{ color: #cc00cc \}
.ansi-color-200    \{ color: #ff00cc \}
.ansi-color-26     \{ color: #0033cc \}
.ansi-color-62     \{ color: #3333cc \}
.ansi-color-98     \{ color: #6633cc \}
.ansi-color-134    \{ color: #9933cc \}
.ansi-color-170    \{ color: #cc33cc \}
.ansi-color-206    \{ color: #ff33cc \}
.ansi-color-32     \{ color: #0066cc \}
.ansi-color-68     \{ color: #3366cc \}
.ansi-color-104    \{ color: #6666cc \}
.ansi-color-140    \{ color: #9966cc \}
.ansi-color-176    \{ color: #cc66cc \}
.ansi-color-212    \{ color: #ff66cc \}
.ansi-color-38     \{ color: #0099cc \}
.ansi-color-74     \{ color: #3399cc \}
.ansi-color-110    \{ color: #6699cc \}
.ansi-color-146    \{ color: #9999cc \}
.ansi-color-182    \{ color: #cc99cc \}
.ansi-color-218    \{ color: #ff99cc \}
.ansi-color-44     \{ color: #00cccc \}
.ansi-color-80     \{ color: #33cccc \}
.ansi-color-116    \{ color: #66cccc \}
.ansi-color-152    \{ color: #99cccc \}
.ansi-color-188    \{ color: #cccccc \}
.ansi-color-224    \{ color: #ffcccc \}
.ansi-color-50     \{ color: #00ffcc \}
.ansi-color-86     \{ color: #33ffcc \}
.ansi-color-122    \{ color: #66ffcc \}
.ansi-color-158    \{ color: #99ffcc \}
.ansi-color-194    \{ color: #ccffcc \}
.ansi-color-230    \{ color: #ffffcc \}
.ansi-color-21     \{ color: #0000ff \}
.ansi-color-57     \{ color: #3300ff \}
.ansi-color-93     \{ color: #6600ff \}
.ansi-color-129    \{ color: #9900ff \}
.ansi-color-165    \{ color: #cc00ff \}
.ansi-color-201    \{ color: #ff00ff \}
.ansi-color-27     \{ color: #0033ff \}
.ansi-color-63     \{ color: #3333ff \}
.ansi-color-99     \{ color: #6633ff \}
.ansi-color-135    \{ color: #9933ff \}
.ansi-color-171    \{ color: #cc33ff \}
.ansi-color-207    \{ color: #ff33ff \}
.ansi-color-33     \{ color: #0066ff \}
.ansi-color-69     \{ color: #3366ff \}
.ansi-color-105    \{ color: #6666ff \}
.ansi-color-141    \{ color: #9966ff \}
.ansi-color-177    \{ color: #cc66ff \}
.ansi-color-213    \{ color: #ff66ff \}
.ansi-color-39     \{ color: #0099ff \}
.ansi-color-75     \{ color: #3399ff \}
.ansi-color-111    \{ color: #6699ff \}
.ansi-color-147    \{ color: #9999ff \}
.ansi-color-183    \{ color: #cc99ff \}
.ansi-color-219    \{ color: #ff99ff \}
.ansi-color-45     \{ color: #00ccff \}
.ansi-color-81     \{ color: #33ccff \}
.ansi-color-117    \{ color: #66ccff \}
.ansi-color-153    \{ color: #99ccff \}
.ansi-color-189    \{ color: #ccccff \}
.ansi-color-225    \{ color: #ffccff \}
.ansi-color-51     \{ color: #00ffff \}
.ansi-color-87     \{ color: #33ffff \}
.ansi-color-123    \{ color: #66ffff \}
.ansi-color-159    \{ color: #99ffff \}
.ansi-color-195    \{ color: #ccffff \}
.ansi-color-231    \{ color: #ffffff \}
.ansi-color-232    \{ color: #0a0a0a \}
.ansi-color-233    \{ color: #141414 \}
.ansi-color-234    \{ color: #1f1f1f \}
.ansi-color-235    \{ color: #292929 \}
.ansi-color-236    \{ color: #333333 \}
.ansi-color-237    \{ color: #3d3d3d \}
.ansi-color-238    \{ color: #474747 \}
.ansi-color-239    \{ color: #525252 \}
.ansi-color-240    \{ color: #5c5c5c \}
.ansi-color-241    \{ color: #666666 \}
.ansi-color-242    \{ color: #707070 \}
.ansi-color-243    \{ color: #7a7a7a \}
.ansi-color-244    \{ color: #858585 \}
.ansi-color-245    \{ color: #8f8f8f \}
.ansi-color-246    \{ color: #999999 \}
.ansi-color-247    \{ color: #a3a3a3 \}
.ansi-color-248    \{ color: #adadad \}
.ansi-color-249    \{ color: #b8b8b8 \}
.ansi-color-250    \{ color: #c2c2c2 \}
.ansi-color-251    \{ color: #cccccc \}
.ansi-color-252    \{ color: #d6d6d6 \}
.ansi-color-253    \{ color: #e0e0e0 \}
.ansi-color-254    \{ color: #ebebeb \}
.ansi-color-255    \{ color: #f5f5f5 \}
.ansi-bg-color-16  \{ background-color: #000000 \}
.ansi-bg-color-52  \{ background-color: #330000 \}
.ansi-bg-color-88  \{ background-color: #660000 \}
.ansi-bg-color-124 \{ background-color: #990000 \}
.ansi-bg-color-160 \{ background-color: #cc0000 \}
.ansi-bg-color-196 \{ background-color: #ff0000 \}
.ansi-bg-color-22  \{ background-color: #003300 \}
.ansi-bg-color-58  \{ background-color: #333300 \}
.ansi-bg-color-94  \{ background-color: #663300 \}
.ansi-bg-color-130 \{ background-color: #993300 \}
.ansi-bg-color-166 \{ background-color: #cc3300 \}
.ansi-bg-color-202 \{ background-color: #ff3300 \}
.ansi-bg-color-28  \{ background-color: #006600 \}
.ansi-bg-color-64  \{ background-color: #336600 \}
.ansi-bg-color-100 \{ background-color: #666600 \}
.ansi-bg-color-136 \{ background-color: #996600 \}
.ansi-bg-color-172 \{ background-color: #cc6600 \}
.ansi-bg-color-208 \{ background-color: #ff6600 \}
.ansi-bg-color-34  \{ background-color: #009900 \}
.ansi-bg-color-70  \{ background-color: #339900 \}
.ansi-bg-color-106 \{ background-color: #669900 \}
.ansi-bg-color-142 \{ background-color: #999900 \}
.ansi-bg-color-178 \{ background-color: #cc9900 \}
.ansi-bg-color-214 \{ background-color: #ff9900 \}
.ansi-bg-color-40  \{ background-color: #00cc00 \}
.ansi-bg-color-76  \{ background-color: #33cc00 \}
.ansi-bg-color-112 \{ background-color: #66cc00 \}
.ansi-bg-color-148 \{ background-color: #99cc00 \}
.ansi-bg-color-184 \{ background-color: #cccc00 \}
.ansi-bg-color-220 \{ background-color: #ffcc00 \}
.ansi-bg-color-46  \{ background-color: #00ff00 \}
.ansi-bg-color-82  \{ background-color: #33ff00 \}
.ansi-bg-color-118 \{ background-color: #66ff00 \}
.ansi-bg-color-154 \{ background-color: #99ff00 \}
.ansi-bg-color-190 \{ background-color: #ccff00 \}
.ansi-bg-color-226 \{ background-color: #ffff00 \}
.ansi-bg-color-17  \{ background-color: #000033 \}
.ansi-bg-color-53  \{ background-color: #330033 \}
.ansi-bg-color-89  \{ background-color: #660033 \}
.ansi-bg-color-125 \{ background-color: #990033 \}
.ansi-bg-color-161 \{ background-color: #cc0033 \}
.ansi-bg-color-197 \{ background-color: #ff0033 \}
.ansi-bg-color-23  \{ background-color: #003333 \}
.ansi-bg-color-59  \{ background-color: #333333 \}
.ansi-bg-color-95  \{ background-color: #663333 \}
.ansi-bg-color-131 \{ background-color: #993333 \}
.ansi-bg-color-167 \{ background-color: #cc3333 \}
.ansi-bg-color-203 \{ background-color: #ff3333 \}
.ansi-bg-color-29  \{ background-color: #006633 \}
.ansi-bg-color-65  \{ background-color: #336633 \}
.ansi-bg-color-101 \{ background-color: #666633 \}
.ansi-bg-color-137 \{ background-color: #996633 \}
.ansi-bg-color-173 \{ background-color: #cc6633 \}
.ansi-bg-color-209 \{ background-color: #ff6633 \}
.ansi-bg-color-35  \{ background-color: #009933 \}
.ansi-bg-color-71  \{ background-color: #339933 \}
.ansi-bg-color-107 \{ background-color: #669933 \}
.ansi-bg-color-143 \{ background-color: #999933 \}
.ansi-bg-color-179 \{ background-color: #cc9933 \}
.ansi-bg-color-215 \{ background-color: #ff9933 \}
.ansi-bg-color-41  \{ background-color: #00cc33 \}
.ansi-bg-color-77  \{ background-color: #33cc33 \}
.ansi-bg-color-113 \{ background-color: #66cc33 \}
.ansi-bg-color-149 \{ background-color: #99cc33 \}
.ansi-bg-color-185 \{ background-color: #cccc33 \}
.ansi-bg-color-221 \{ background-color: #ffcc33 \}
.ansi-bg-color-47  \{ background-color: #00ff33 \}
.ansi-bg-color-83  \{ background-color: #33ff33 \}
.ansi-bg-color-119 \{ background-color: #66ff33 \}
.ansi-bg-color-155 \{ background-color: #99ff33 \}
.ansi-bg-color-191 \{ background-color: #ccff33 \}
.ansi-bg-color-227 \{ background-color: #ffff33 \}
.ansi-bg-color-18  \{ background-color: #000066 \}
.ansi-bg-color-54  \{ background-color: #330066 \}
.ansi-bg-color-90  \{ background-color: #660066 \}
.ansi-bg-color-126 \{ background-color: #990066 \}
.ansi-bg-color-162 \{ background-color: #cc0066 \}
.ansi-bg-color-198 \{ background-color: #ff0066 \}
.ansi-bg-color-24  \{ background-color: #003366 \}
.ansi-bg-color-60  \{ background-color: #333366 \}
.ansi-bg-color-96  \{ background-color: #663366 \}
.ansi-bg-color-132 \{ background-color: #993366 \}
.ansi-bg-color-168 \{ background-color: #cc3366 \}
.ansi-bg-color-204 \{ background-color: #ff3366 \}
.ansi-bg-color-30  \{ background-color: #006666 \}
.ansi-bg-color-66  \{ background-color: #336666 \}
.ansi-bg-color-102 \{ background-color: #666666 \}
.ansi-bg-color-138 \{ background-color: #996666 \}
.ansi-bg-color-174 \{ background-color: #cc6666 \}
.ansi-bg-color-210 \{ background-color: #ff6666 \}
.ansi-bg-color-36  \{ background-color: #009966 \}
.ansi-bg-color-72  \{ background-color: #339966 \}
.ansi-bg-color-108 \{ background-color: #669966 \}
.ansi-bg-color-144 \{ background-color: #999966 \}
.ansi-bg-color-180 \{ background-color: #cc9966 \}
.ansi-bg-color-216 \{ background-color: #ff9966 \}
.ansi-bg-color-42  \{ background-color: #00cc66 \}
.ansi-bg-color-78  \{ background-color: #33cc66 \}
.ansi-bg-color-114 \{ background-color: #66cc66 \}
.ansi-bg-color-150 \{ background-color: #99cc66 \}
.ansi-bg-color-186 \{ background-color: #cccc66 \}
.ansi-bg-color-222 \{ background-color: #ffcc66 \}
.ansi-bg-color-48  \{ background-color: #00ff66 \}
.ansi-bg-color-84  \{ background-color: #33ff66 \}
.ansi-bg-color-120 \{ background-color: #66ff66 \}
.ansi-bg-color-156 \{ background-color: #99ff66 \}
.ansi-bg-color-192 \{ background-color: #ccff66 \}
.ansi-bg-color-228 \{ background-color: #ffff66 \}
.ansi-bg-color-19  \{ background-color: #000099 \}
.ansi-bg-color-55  \{ background-color: #330099 \}
.ansi-bg-color-91  \{ background-color: #660099 \}
.ansi-bg-color-127 \{ background-color: #990099 \}
.ansi-bg-color-163 \{ background-color: #cc0099 \}
.ansi-bg-color-199 \{ background-color: #ff0099 \}
.ansi-bg-color-25  \{ background-color: #003399 \}
.ansi-bg-color-61  \{ background-color: #333399 \}
.ansi-bg-color-97  \{ background-color: #663399 \}
.ansi-bg-color-133 \{ background-color: #993399 \}
.ansi-bg-color-169 \{ background-color: #cc3399 \}
.ansi-bg-color-205 \{ background-color: #ff3399 \}
.ansi-bg-color-31  \{ background-color: #006699 \}
.ansi-bg-color-67  \{ background-color: #336699 \}
.ansi-bg-color-103 \{ background-color: #666699 \}
.ansi-bg-color-139 \{ background-color: #996699 \}
.ansi-bg-color-175 \{ background-color: #cc6699 \}
.ansi-bg-color-211 \{ background-color: #ff6699 \}
.ansi-bg-color-37  \{ background-color: #009999 \}
.ansi-bg-color-73  \{ background-color: #339999 \}
.ansi-bg-color-109 \{ background-color: #669999 \}
.ansi-bg-color-145 \{ background-color: #999999 \}
.ansi-bg-color-181 \{ background-color: #cc9999 \}
.ansi-bg-color-217 \{ background-color: #ff9999 \}
.ansi-bg-color-43  \{ background-color: #00cc99 \}
.ansi-bg-color-79  \{ background-color: #33cc99 \}
.ansi-bg-color-115 \{ background-color: #66cc99 \}
.ansi-bg-color-151 \{ background-color: #99cc99 \}
.ansi-bg-color-187 \{ background-color: #cccc99 \}
.ansi-bg-color-223 \{ background-color: #ffcc99 \}
.ansi-bg-color-49  \{ background-color: #00ff99 \}
.ansi-bg-color-85  \{ background-color: #33ff99 \}
.ansi-bg-color-121 \{ background-color: #66ff99 \}
.ansi-bg-color-157 \{ background-color: #99ff99 \}
.ansi-bg-color-193 \{ background-color: #ccff99 \}
.ansi-bg-color-229 \{ background-color: #ffff99 \}
.ansi-bg-color-20  \{ background-color: #0000cc \}
.ansi-bg-color-56  \{ background-color: #3300cc \}
.ansi-bg-color-92  \{ background-color: #6600cc \}
.ansi-bg-color-128 \{ background-color: #9900cc \}
.ansi-bg-color-164 \{ background-color: #cc00cc \}
.ansi-bg-color-200 \{ background-color: #ff00cc \}
.ansi-bg-color-26  \{ background-color: #0033cc \}
.ansi-bg-color-62  \{ background-color: #3333cc \}
.ansi-bg-color-98  \{ background-color: #6633cc \}
.ansi-bg-color-134 \{ background-color: #9933cc \}
.ansi-bg-color-170 \{ background-color: #cc33cc \}
.ansi-bg-color-206 \{ background-color: #ff33cc \}
.ansi-bg-color-32  \{ background-color: #0066cc \}
.ansi-bg-color-68  \{ background-color: #3366cc \}
.ansi-bg-color-104 \{ background-color: #6666cc \}
.ansi-bg-color-140 \{ background-color: #9966cc \}
.ansi-bg-color-176 \{ background-color: #cc66cc \}
.ansi-bg-color-212 \{ background-color: #ff66cc \}
.ansi-bg-color-38  \{ background-color: #0099cc \}
.ansi-bg-color-74  \{ background-color: #3399cc \}
.ansi-bg-color-110 \{ background-color: #6699cc \}
.ansi-bg-color-146 \{ background-color: #9999cc \}
.ansi-bg-color-182 \{ background-color: #cc99cc \}
.ansi-bg-color-218 \{ background-color: #ff99cc \}
.ansi-bg-color-44  \{ background-color: #00cccc \}
.ansi-bg-color-80  \{ background-color: #33cccc \}
.ansi-bg-color-116 \{ background-color: #66cccc \}
.ansi-bg-color-152 \{ background-color: #99cccc \}
.ansi-bg-color-188 \{ background-color: #cccccc \}
.ansi-bg-color-224 \{ background-color: #ffcccc \}
.ansi-bg-color-50  \{ background-color: #00ffcc \}
.ansi-bg-color-86  \{ background-color: #33ffcc \}
.ansi-bg-color-122 \{ background-color: #66ffcc \}
.ansi-bg-color-158 \{ background-color: #99ffcc \}
.ansi-bg-color-194 \{ background-color: #ccffcc \}
.ansi-bg-color-230 \{ background-color: #ffffcc \}
.ansi-bg-color-21  \{ background-color: #0000ff \}
.ansi-bg-color-57  \{ background-color: #3300ff \}
.ansi-bg-color-93  \{ background-color: #6600ff \}
.ansi-bg-color-129 \{ background-color: #9900ff \}
.ansi-bg-color-165 \{ background-color: #cc00ff \}
.ansi-bg-color-201 \{ background-color: #ff00ff \}
.ansi-bg-color-27  \{ background-color: #0033ff \}
.ansi-bg-color-63  \{ background-color: #3333ff \}
.ansi-bg-color-99  \{ background-color: #6633ff \}
.ansi-bg-color-135 \{ background-color: #9933ff \}
.ansi-bg-color-171 \{ background-color: #cc33ff \}
.ansi-bg-color-207 \{ background-color: #ff33ff \}
.ansi-bg-color-33  \{ background-color: #0066ff \}
.ansi-bg-color-69  \{ background-color: #3366ff \}
.ansi-bg-color-105 \{ background-color: #6666ff \}
.ansi-bg-color-141 \{ background-color: #9966ff \}
.ansi-bg-color-177 \{ background-color: #cc66ff \}
.ansi-bg-color-213 \{ background-color: #ff66ff \}
.ansi-bg-color-39  \{ background-color: #0099ff \}
.ansi-bg-color-75  \{ background-color: #3399ff \}
.ansi-bg-color-111 \{ background-color: #6699ff \}
.ansi-bg-color-147 \{ background-color: #9999ff \}
.ansi-bg-color-183 \{ background-color: #cc99ff \}
.ansi-bg-color-219 \{ background-color: #ff99ff \}
.ansi-bg-color-45  \{ background-color: #00ccff \}
.ansi-bg-color-81  \{ background-color: #33ccff \}
.ansi-bg-color-117 \{ background-color: #66ccff \}
.ansi-bg-color-153 \{ background-color: #99ccff \}
.ansi-bg-color-189 \{ background-color: #ccccff \}
.ansi-bg-color-225 \{ background-color: #ffccff \}
.ansi-bg-color-51  \{ background-color: #00ffff \}
.ansi-bg-color-87  \{ background-color: #33ffff \}
.ansi-bg-color-123 \{ background-color: #66ffff \}
.ansi-bg-color-159 \{ background-color: #99ffff \}
.ansi-bg-color-195 \{ background-color: #ccffff \}
.ansi-bg-color-231 \{ background-color: #ffffff \}
.ansi-bg-color-232 \{ background-color: #0a0a0a \}
.ansi-bg-color-233 \{ background-color: #141414 \}
.ansi-bg-color-234 \{ background-color: #1f1f1f \}
.ansi-bg-color-235 \{ background-color: #292929 \}
.ansi-bg-color-236 \{ background-color: #333333 \}
.ansi-bg-color-237 \{ background-color: #3d3d3d \}
.ansi-bg-color-238 \{ background-color: #474747 \}
.ansi-bg-color-239 \{ background-color: #525252 \}
.ansi-bg-color-240 \{ background-color: #5c5c5c \}
.ansi-bg-color-241 \{ background-color: #666666 \}
.ansi-bg-color-242 \{ background-color: #707070 \}
.ansi-bg-color-243 \{ background-color: #7a7a7a \}
.ansi-bg-color-244 \{ background-color: #858585 \}
.ansi-bg-color-245 \{ background-color: #8f8f8f \}
.ansi-bg-color-246 \{ background-color: #999999 \}
.ansi-bg-color-247 \{ background-color: #a3a3a3 \}
.ansi-bg-color-248 \{ background-color: #adadad \}
.ansi-bg-color-249 \{ background-color: #b8b8b8 \}
.ansi-bg-color-250 \{ background-color: #c2c2c2 \}
.ansi-bg-color-251 \{ background-color: #cccccc \}
.ansi-bg-color-252 \{ background-color: #d6d6d6 \}
.ansi-bg-color-253 \{ background-color: #e0e0e0 \}
.ansi-bg-color-254 \{ background-color: #ebebeb \}
.ansi-bg-color-255 \{ background-color: #f5f5f5 \}
div.asciicast      \{ color: #B9C0CB, font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace, line-height: 1.300000 \}
</style>
}}
}
\section{callr}{
\subsection{Features}{
\itemize{
\item Calls an R function, with arguments, in a subprocess.
\item Copies function arguments to the subprocess and copies the return value of the function back, seamlessly.
\item Copies error objects back from the subprocess, including a stack trace.
\item Shows and/or collects the standard output and standard error of the subprocess.
\item Supports both one-off and persistent R subprocesses.
\item Calls the function synchronously or asynchronously (in the background).
\item Can call \verb{R CMD} commands, synchronously or asynchronously.
\item Can call R scripts, synchronously or asynchronously.
\item Provides extensible \code{r_process}, \code{rcmd_process} and \code{rscript_process} R6 classes, based on \code{processx::process}.
}
}

\subsection{Installation}{

Install the stable version from CRAN:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{install.packages("callr")
}\if{html}{\out{</div>}}
}

\subsection{Synchronous, one-off R processes}{

Use \code{r()} to run an R function in a new R process.
The results are passed back seamlessly:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{callr::r(function() var(iris[, 1:4]))
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#>              Sepal.Length Sepal.Width Petal.Length Petal.Width                  
#> Sepal.Length    0.6856935  -0.0424340    1.2743154   0.5162707                  
#> Sepal.Width    -0.0424340   0.1899794   -0.3296564  -0.1216394                  
#> Petal.Length    1.2743154  -0.3296564    3.1162779   1.2956094                  
#> Petal.Width     0.5162707  -0.1216394    1.2956094   0.5810063                  
</pre></div>
}}

\subsection{Passing arguments}{

You can pass arguments to the function by setting \code{args} to the list of arguments.
This is often necessary as these arguments are explicitly copied to the child process, whereas the evaluated function cannot refer to variables in the parent.
For example, the following does not work:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{mycars <- cars
callr::r(function() summary(mycars))
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> <span class="ansi-bold ansi-color-3">Error</span>:                                                                          
#> <span class="ansi-color-3">!</span> error in callr subprocess                                                     
#> <span class="ansi-bold">Caused by error</span> in `summary(mycars)`:                                           
#> <span class="ansi-color-3">!</span> object 'mycars' not found                                                     
#> <span class="ansi-color-8">Type .Last.error to see the more details.</span>                                       
</pre></div>
}}


But this does:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{mycars <- cars
callr::r(function(x) summary(x), args = list(mycars))
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#>      speed           dist                                                       
#>  Min.   : 4.0   Min.   :  2.00                                                  
#>  1st Qu.:12.0   1st Qu.: 26.00                                                  
#>  Median :15.0   Median : 36.00                                                  
#>  Mean   :15.4   Mean   : 42.98                                                  
#>  3rd Qu.:19.0   3rd Qu.: 56.00                                                  
#>  Max.   :25.0   Max.   :120.00                                                  
</pre></div>
}}


Note that the arguments will be serialized and saved to a file, so if they are large R objects, it might take a long time for the child process to start up.
}

\subsection{Using packages}{

You can use any R package in the child process, just make sure to refer to it explicitly with the \code{::} operator.
For example, the following code creates an \href{https://github.com/igraph/rigraph}{igraph} graph in the child, and calculates some metrics of it.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{callr::r(function() \{ g <- igraph::sample_gnp(1000, 4/1000); igraph::diameter(g) \})
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> [1] 11                                                                          
</pre></div>
}}

}

\subsection{Error handling}{

callr copies errors from the child process back to the main R session:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{callr::r(function() 1 + "A")
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> <span class="ansi-bold ansi-color-3">Error</span>:                                                                          
#> <span class="ansi-color-3">!</span> error in callr subprocess                                                     
#> <span class="ansi-bold">Caused by error</span> in `1 + "A"`:                                                   
#> <span class="ansi-color-3">!</span> non-numeric argument to binary operator                                       
#> <span class="ansi-color-8">Type .Last.error to see the more details.</span>                                       
</pre></div>
callr sets the `.Last.error` variable, and after an error you can inspect this for more details about the error, including stack traces both from the main R process and the subprocess.
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{.Last.error
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> <span class="ansi-color-4">&lt;callr_error/rlib_error_3_0/rlib_error/error&gt;</span>                                   
#> <span class="ansi-bold ansi-color-3">Error</span>:                                                                          
#> <span class="ansi-color-3">!</span> error in callr subprocess                                                     
#> <span class="ansi-bold">Caused by error</span> in `1 + "A"`:                                                   
#> <span class="ansi-color-3">!</span> non-numeric argument to binary operator                                       
#> ---                                                                             
#> Backtrace:                                                                      
#> <span class="ansi-color-8">1. </span>callr::<span class="ansi-color-6">r</span><span class="ansi-color-3">(</span><span class="ansi-color-1">function</span><span class="ansi-color-4">()</span> <span class="ansi-color-4">1</span> <span class="ansi-color-2">+</span> <span class="ansi-color-3">"A")</span>                                                 
#> <span class="ansi-color-8">2. </span>callr:::<span class="ansi-color-6">get_result</span><span class="ansi-color-3">(</span>output = out, options<span class="ansi-color-3">)</span><span class="ansi-color-8"> at eval.R:189:3</span>                    
#> <span class="ansi-color-8">3. </span>callr:::<span class="ansi-color-6">throw</span><span class="ansi-color-3">(</span><span class="ansi-color-6">callr_remote_error</span><span class="ansi-color-4">(</span>remerr<span class="ansi-color-4">)</span><span class="ansi-color-3">)</span><span class="ansi-color-8"> at result.R:67:5</span>                   
#> <span class="ansi-color-8">4. </span>callr:::<span class="ansi-color-6">callr_remote_error</span><span class="ansi-color-3">(</span>remerr<span class="ansi-color-3">)</span><span class="ansi-color-8"> at result.R:67:5</span>                          
#> <span class="ansi-color-8">5. </span>callr:::<span class="ansi-color-6">throw</span><span class="ansi-color-3">(</span>err, parent = remerr<span class="ansi-color-4">[[3]]</span><span class="ansi-color-3">)</span><span class="ansi-color-8"> at error.R:44:3</span>                     
#> ---                                                                             
#> Subprocess backtrace:                                                           
#> <span class="ansi-color-8">1. </span>base::.handleSimpleError(function (e) …                                      
#> <span class="ansi-color-8">2. </span>global <span class="ansi-color-6">h</span><span class="ansi-color-3">(</span><span class="ansi-color-6">simpleError</span><span class="ansi-color-4">(</span>msg, call<span class="ansi-color-4">)</span><span class="ansi-color-3">)</span>                                             
</pre></div>
}}


The error objects has two parts.
The first belongs to the main process, and the second belongs to the subprocess.

\code{.Last.error} also includes a stack trace, that includes both the main R process and the subprocess:

The top part of the trace contains the frames in the main process, and the bottom part contains the frames in the subprocess, starting with the anonymous function.
}

\subsection{Standard output and error}{

By default, the standard output and error of the child is lost, but you can request callr to redirect them to files, and then inspect the files in the parent:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{x <- callr::r(function() \{ print("hello world!"); message("hello again!") \},
  stdout = "/tmp/out", stderr = "/tmp/err"
)
readLines("/tmp/out")
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> [1] "[1] \\"hello world!\\""                                                      
</pre></div>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{readLines("/tmp/err")
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> [1] "hello again!"                                                              
</pre></div>
}}


With the \code{stdout} option, the standard output is collected and can be examined once the child process finished.
The \code{show = TRUE} options will also show the output of the child, as it is printed, on the console of the parent.
}

}

\subsection{Background R processes}{

\code{r_bg()} is similar to \code{r()} but it starts the R process in the background.
It returns an \code{r_process} R6 object, that provides a rich API:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{rp <- callr::r_bg(function() Sys.sleep(.2))
rp
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> PROCESS 'R', running, pid 142.                                                  
</pre></div>
}}


This is a list of all \code{r_process} methods:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{ls(rp)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#>  [1] "as_ps_handle"          "clone"                 "finalize"                 
#>  [4] "format"                "get_cmdline"           "get_cpu_times"            
#>  [7] "get_error_connection"  "get_error_file"        "get_exe"                  
#> [10] "get_exit_status"       "get_input_connection"  "get_input_file"           
#> [13] "get_memory_info"       "get_name"              "get_output_connection"    
#> [16] "get_output_file"       "get_pid"               "get_poll_connection"      
#> [19] "get_result"            "get_start_time"        "get_status"               
#> [22] "get_username"          "get_wd"                "has_error_connection"     
#> [25] "has_input_connection"  "has_output_connection" "has_poll_connection"      
#> [28] "initialize"            "interrupt"             "is_alive"                 
#> [31] "is_incomplete_error"   "is_incomplete_output"  "is_supervised"            
#> [34] "kill"                  "kill_tree"             "poll_io"                  
#> [37] "print"                 "read_all_error"        "read_all_error_lines"     
#> [40] "read_all_output"       "read_all_output_lines" "read_error"               
#> [43] "read_error_lines"      "read_output"           "read_output_lines"        
#> [46] "resume"                "signal"                "supervise"                
#> [49] "suspend"               "wait"                  "write_input"              
</pre></div>
}}


These include all methods of the \code{processx::process} superclass and the new \code{get_result()} method, to retrieve the R object returned by the function call.
Some of the handiest methods are:
\itemize{
\item \code{get_exit_status()} to query the exit status of a finished process.
\item \code{get_result()} to collect the return value of the R function call.
\item \code{interrupt()} to send an interrupt to the process. This is equivalent to a \code{CTRL+C} key press, and the R process might ignore it.
\item \code{is_alive()} to check if the process is alive.
\item \code{kill()} to terminate the process.
\item \code{poll_io()} to wait for any standard output, standard error, or the completion of the process, with a timeout.
\item \verb{read_*()} to read the standard output or error.
\item \code{suspend()} and \code{resume()} to stop and continue a process.
\item \code{wait()} to wait for the completion of the process, with a timeout.
}
}

\subsection{Multiple background R processes and \code{poll()}}{

Multiple background R processes are best managed with the \code{processx::poll()} function that waits for events (standard output/error or termination) from multiple processes.
It returns as soon as one process has generated an event, or if its timeout has expired.
The timeout is in milliseconds.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{rp1 <- callr::r_bg(function() \{ Sys.sleep(1/2); "1 done" \})
rp2 <- callr::r_bg(function() \{ Sys.sleep(1/1000); "2 done" \})
processx::poll(list(rp1, rp2), 1000)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> [[1]]                                                                           
#>   output    error  process                                                      
#> "silent" "silent" "silent"                                                      
#>                                                                                 
#> [[2]]                                                                           
#>  output   error process                                                         
#> "ready" "ready" "ready"                                                         
#>                                                                                 
</pre></div>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{rp2$get_result()
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> [1] "2 done"                                                                    
</pre></div>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{processx::poll(list(rp1), 1000)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> [[1]]                                                                           
#>  output   error process                                                         
#> "ready" "ready" "ready"                                                         
#>                                                                                 
</pre></div>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{rp1$get_result()
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> [1] "1 done"                                                                    
</pre></div>
}}

}

\subsection{Persistent R sessions}{

\code{r_session} is another \code{processx::process} subclass that represents a persistent background R session:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{rs <- callr::r_session$new()
rs
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> R SESSION, alive, idle, pid 175.                                                
</pre></div>
}}


\code{r_session$run()} is a synchronous call, that works similarly to \code{r()}, but uses the persistent session.
\code{r_session$call()} starts the function call and returns immediately.
The \code{r_session$poll_process()} method or \code{processx::poll()} can then be used to wait for the completion or other events from one or more R sessions, R processes or other \code{processx::process} objects.

Once an R session is done with an asynchronous computation, its \code{poll_process()} method returns \code{"ready"} and the \code{r_session$read()} method can read out the result.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{rs <- callr::r_session$new()
rs$run(function() runif(10))
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#>  [1] 0.26526255 0.72335229 0.82726363 0.26413247 0.04080421 0.88874834          
#>  [7] 0.28729820 0.59580386 0.15198079 0.38166974                                
</pre></div>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{rs$call(function() rnorm(10))
rs
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> R SESSION, alive, busy, pid 179.                                                
</pre></div>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{rs$poll_process(2000)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> [1] "ready"                                                                     
</pre></div>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{rs$read()
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> $code                                                                           
#> [1] 200                                                                         
#>                                                                                 
#> $message                                                                        
#> [1] "done callr-rs-result-186816666903e"                                        
#>                                                                                 
#> $result                                                                         
#>  [1] -0.16817450  0.06924695  0.68536270  0.93540193 -0.61877140  0.62312132    
#>  [7] -0.64540776  1.35354713  1.06643995  0.80819157                            
#>                                                                                 
#> $stdout                                                                         
#> [1] ""                                                                          
#>                                                                                 
#> $stderr                                                                         
#> [1] ""                                                                          
#>                                                                                 
#> $error                                                                          
#> NULL                                                                            
#>                                                                                 
#> attr(,"class")                                                                  
#> [1] "callr_session_result"                                                      
</pre></div>
}}

}

\subsection{Running \verb{R CMD} commands}{

The \code{rcmd()} function calls an \verb{R CMD} command.
For example, you can call \verb{R CMD INSTALL}, \verb{R CMD check} or \verb{R CMD config} this way:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{callr::rcmd("config", "CC")
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="asciicast"><pre>
#> $status                                                                         
#> [1] 0                                                                           
#>                                                                                 
#> $stdout                                                                         
#> [1] "clang -arch arm64\\n"                                                       
#>                                                                                 
#> $stderr                                                                         
#> [1] ""                                                                          
#>                                                                                 
#> $timeout                                                                        
#> [1] FALSE                                                                       
#>                                                                                 
#> $command                                                                        
#> [1] "/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/bin/R"        
#> [2] "CMD"                                                                       
#> [3] "config"                                                                    
#> [4] "CC"                                                                        
#>                                                                                 
</pre></div>
}}


This returns a list with three components: the standard output, the standard error, and the exit (status) code of the \verb{R CMD} command.
}

\subsection{Code of Conduct}{

Please note that the callr project is released with a
\href{https://callr.r-lib.org/CODE_OF_CONDUCT.html}{Contributor Code of Conduct}.
By contributing to this project, you agree to abide by its terms.
}

\subsection{License}{

MIT © Mango Solutions, RStudio
}
}

\seealso{
Useful links:
\itemize{
  \item \url{https://callr.r-lib.org}
  \item \url{https://github.com/r-lib/callr#readme}
  \item Report bugs at \url{https://github.com/r-lib/callr/issues}
}

}
\author{
\strong{Maintainer}: Gábor Csárdi \email{csardi.gabor@gmail.com} (\href{https://orcid.org/0000-0001-7098-9676}{ORCID}) [copyright holder]

Authors:
\itemize{
  \item Winston Chang
}

Other contributors:
\itemize{
  \item RStudio [copyright holder, funder]
  \item Mango Solutions [copyright holder, funder]
}

}
\keyword{internal}
